name: Deploy Terraform with Approval

# Trigger the workflow on push to relevant files.
on:
  push:
    paths:
      - '**/*.tf'  # Monitor changes in Terraform files.
      - '**/*'     # Monitor other files if needed.

permissions:
  contents: write  # Allows writing to the repository.
  pull-requests: write  # Allows updating pull requests.
  id-token: write  # Enables authentication with AWS using an OIDC token.

jobs:
  DEPLOY:
    runs-on: ubuntu-latest
    environment:
      name: development

    steps:
      # Step 1: Checkout code from the repository.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Detect the directory where changes occurred.
      - name: Detect changed directory
        id: changes
        run: |
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ] || [ -z "${{ github.event.before }}" ]; then
            echo "No previous commit found. Using HEAD."
            BASE_COMMIT=$(git rev-parse HEAD~1)
          else
            BASE_COMMIT=${{ github.event.before }}
          fi

          echo "Comparing commits: $BASE_COMMIT and ${{ github.sha }}"
          CHANGED_DIR=$(git diff --name-only $BASE_COMMIT ${{ github.sha }} | grep -Eo '^(s3|lambda)/' | sort -u | head -n 1)

          if [ -z "$CHANGED_DIR" ]; then
            echo "No relevant changes detected. Skipping Terraform steps."
            exit 1
          fi

          echo "Detected changed directory: $CHANGED_DIR"
          echo "::set-output name=changed_dir::$CHANGED_DIR"

        # Check if the directory exists.

      # Step 3: Verify that the directory exists and contains .tf files.
      - name: Verify changed directory
        run: |
          if [ ! -d "${{ steps.changes.outputs.changed_dir }}" ]; then
            echo "Directory does not exist: ${{ steps.changes.outputs.changed_dir }}"
            exit 1
          fi
          cd ${{ steps.changes.outputs.changed_dir }}
          if [ -z "$(ls *.tf 2>/dev/null)" ]; then
            echo "No Terraform files found in the directory: ${{ steps.changes.outputs.changed_dir }}"
            exit 1
          fi
          echo "Terraform files found in: ${{ steps.changes.outputs.changed_dir }}"

      # Step 4: Configure AWS credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Step 5: Set up Terraform.
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Step 6: Initialize Terraform.
      - name: Terraform Init
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform init

      # Step 7: Generate Terraform plan.
      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform plan -out=tfplan

      # Step 8: Show the Terraform plan for review.
      - name: Show Terraform Plan
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform show -no-color tfplan > plan.txt

      # Step 9: Upload the Terraform plan as an artifact.
      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ steps.changes.outputs.changed_dir }}/tfplan

  APPLY:
    runs-on: ubuntu-latest
    needs: DEPLOY
    environment:
      name: development

    steps:
      # Step 1: Checkout code from the repository.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Download the Terraform plan artifact.
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      # Step 3: Configure AWS credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Step 4: Set up Terraform.
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Step 5: Initialize Terraform.
      - name: Terraform Init
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform init

      # Step 6: Apply the Terraform plan.
      - name: Terraform Apply
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform apply -auto-approve tfplan
