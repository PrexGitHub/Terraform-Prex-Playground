name: Deploy Terraform with Approval

# Dispara el workflow cuando hay un push.
on:
  push:
    paths:
      - '**/*.tf'  # Escucha cambios en archivos Terraform.
      - '**/*'     # También puedes agregar otros archivos si es necesario.

permissions:
  contents: write  # Permite escribir en el repositorio.
  pull-requests: write  # Permite actualizar pull requests.
  id-token: write  # Permite autenticación con AWS utilizando un token OIDC.

jobs:
  DEPLOY:
    runs-on: ubuntu-latest
    environment:
      name: development

    steps:
      # Paso 1: Descarga el código del repositorio.
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Encuentra la carpeta donde se realizaron los cambios.
      - name: Detect changed directory
        id: changes
        run: |
          echo "::set-output name=changed_dir::$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -Eo '^[^/]+/' | sort -u)"

      # Paso 3: Configura las credenciales de AWS para el job.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Paso 4: Configura Terraform en el entorno.
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Paso 5: Inicializa el directorio de trabajo de Terraform.
      - name: Terraform Init
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform init
          
      - name: List files in the directory
        run: |
          echo "Listing files in the detected directory:"
          cd ${{ steps.changes.outputs.changed_dir }}
          ls -la


      # Paso 6: Genera un plan de ejecución de Terraform.
      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform plan -out=tfplan

      # Paso 7: Muestra el plan de Terraform para revisarlo.
      - name: Show Terraform Plan
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform show -no-color tfplan > plan.txt

      # Paso 8: Sube el plan de Terraform como un artefacto para ser utilizado en otros jobs.
      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ steps.changes.outputs.changed_dir }}/tfplan

  APPLY:
    runs-on: ubuntu-latest
    needs: DEPLOY
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Descarga el plan de Terraform subido como artefacto en el job anterior.
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform init

      # Paso 6: Aplica el plan de Terraform (descargado en Paso 2).
      - name: Terraform Apply
        run: |
          cd ${{ steps.changes.outputs.changed_dir }}
          terraform apply -auto-approve tfplan
