name: Deploy Terraform with Approval

on:
  push:
    paths:
      - 's3/**'       # Detecta cambios en la carpeta S3.
      - 'lambda/**'   # Detecta cambios en la carpeta Lambda.

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  DEPLOY:
    runs-on: ubuntu-latest
    environment:
      name: development

    steps:
      # Paso 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Paso 2: Detectar carpeta modificada
      - name: Determine Changed Directory
        id: detect-dir
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^s3/'; then
            echo "directory=s3" >> $GITHUB_ENV
          elif git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^lambda/'; then
            echo "directory=lambda" >> $GITHUB_ENV
          else
            echo "No relevant changes detected."
            exit 1
          fi
      
      # Paso 3: Configurar las credenciales de AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Paso 4: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Paso 5: Inicializar Terraform en la carpeta detectada
      - name: Terraform Init
        run: terraform init -chdir=${{ env.directory }}

      # Paso 6: Generar el plan de Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -chdir=${{ env.directory }} -out=tfplan

      # Paso 7: Mostrar el plan de Terraform
      - name: Show Terraform Plan
        run: terraform show -no-color ${{ env.directory }}/tfplan > ${{ env.directory }}/plan.txt
      
      # Paso 8: Subir el plan como artefacto
      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ env.directory }}/tfplan

  APPLY:
    runs-on: ubuntu-latest
    needs: DEPLOY
    environment: development

    steps:
      # Paso 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Paso 2: Descargar el artefacto del plan
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      # Paso 3: Configurar las credenciales de AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Paso 4: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Paso 5: Inicializar Terraform en la carpeta detectada
      - name: Terraform Init
        run: terraform init -chdir=${{ env.directory }}

      # Paso 6: Aplicar el plan de Terraform
      - name: Terraform Apply
        run: terraform apply -chdir=${{ env.directory }} -auto-approve tfplan
