name: Deploy Terraform with Approval

on:
  pull_request:
    paths:
      - '**/*'  # Detecta cambios en cualquier archivo.

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  DEPLOY:
    runs-on: ubuntu-latest
    environment:
      name: development

    steps:
      # Paso 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Detectar carpeta modificada
      #EJ: git commit -m "Deploy staging infrastructure\npath:terraform/staging"
      #Deploy production infrastructure => descipcion
      #path:ares/rds

      - name: Extract Path from Commit Message
        id: extract-path
        run: |
          PATH_FROM_COMMIT=$(git log -1 --pretty=%B | grep -Eo '^path:[^ ]+')
          if [ -z "$PATH_FROM_COMMIT" ]; then
            echo "No path specified in commit message. Use 'path:<directory>' format."
            exit 1
          fi
          PATH=${PATH_FROM_COMMIT#path:}
          echo "Detected path from commit: $PATH"
          echo "directory=$PATH" >> $GITHUB_ENV
          
      # Paso 4: Configurar las credenciales de AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Paso 5: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: 1.5.7

      # Paso 6: Inicializar Terraform en la carpeta detectada
      - name: Terraform Init
        run: |
          cd ${{ env.directory }}
          terraform init

      # Paso 7: Generar el plan de Terraform
      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ env.directory }}
          terraform plan -out=tfplan

      # Paso 8: Mostrar el plan de Terraform
      - name: Show Terraform Plan
        run: |
          cd ${{ env.directory }}
          terraform show tfplan > plan.txt

      # Paso 9: Subir el plan como artefacto
      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ env.directory }}/tfplan


  APPLY:
    runs-on: ubuntu-latest
    needs: DEPLOY
    environment: development

    steps:
      # Paso 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Paso 2: Descargar el artefacto del plan
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      # Paso 3: Configurar las credenciales de AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Paso 4: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Paso 5: Inicializar Terraform en la carpeta detectada
      - name: Terraform Init
        run: |
          cd ${{ env.directory }}
          terraform init

      # Paso 6: Aplicar el plan de Terraform
      - name: Terraform Apply
        run: |
          cd ${{ env.directory }}
          terraform apply -auto-approve tfplan
