name: Deploy Terraform with Approval

on:
  pull_request:
    workflow_dispatch:
     
    paths:
      - '**/**'  

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  DEPLOY:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del cÃ³digo
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Detectar carpeta basada en el nombre de la rama
      - name: Detect Directory from Branch Name
        id: detect-dir
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == tf/* ]]; then
            DIR_NAME=$(echo "${{ github.event.pull_request.head.ref }}" | sed 's#^tf/##')
            echo "directory=$DIR_NAME" >> $GITHUB_ENV
            echo $DIR_NAME > directory.txt
          else
            echo "Branch name '${{ github.event.pull_request.head.ref }}' does not follow the 'tf/' convention."
            exit 1
          fi

      # Paso 3: Configurar AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::891377079132:role/access-github-actions
          aws-region: ${{ vars.AWS_REGION }}

      # Paso 4: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Paso 5: Inicializar Terraform
      - name: Terraform Init
        run: |
          cd ${{ env.directory }}
          terraform init

      # Paso 6: Obtener el valor de la variable action_github
      - name: Get action_github value
        id: get_action
        run: |
          ACTION=$(grep -A 3 'variable "action_github"' ${{ env.directory }}/variables.tf | grep 'default' | awk -F'"' '{print $2}')
          echo "action_github=$ACTION" >> $GITHUB_ENV

      # Paso 7: Aplicar la accion apply o destroy
      - name: Terraform Action
        run: |
          cd ${{ env.directory }}
          terraform ${{ env.action_github }} -auto-approve