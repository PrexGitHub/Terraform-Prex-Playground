name: Deploy to Production

on:
  pull_request:
    branches:
      - main  # Cambia a la rama en la que deseas que se ejecute el flujo de despliegue

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: producción  # Nombre del environment configurado en GitHub
      url: ${{ steps.deployment.outputs.page_url }}  # URL opcional para monitoreo o información adicional

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6  # Cambia a la versión de Terraform que necesitas

      # Step 2: Formatear el código de Terraform
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # Step 3: Inicializar Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # Step 4: Validar el código de Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Step 5: Planificar el despliegue de Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true

      # Step 6: Mostrar el plan de Terraform
      - name: Show Plan
        uses: actions/github-script@v6
        if: steps.plan.outcome == 'success'
        with:
          script: |
            const output = require('@actions/core').setOutput;
            const plan = require('fs').readFileSync('tfplan', 'utf8');
            output('plan', plan);

      # Step 7: Solicitar aprobación del equipo antes de aplicar el despliegue
      - name: Await approval
        uses: actions/github-script@v6
        if: steps.plan.outcome == 'success'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviewers = ['nombre-del-equipo'];  # Reemplaza con el nombre del equipo creado
            github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              team_reviewers: reviewers,
            });

      # Step 8: Aplicar el plan de Terraform tras la aprobación
      - name: Terraform Apply
        if: github.event.review.state == 'approved'
        run: terraform apply "tfplan"

      # Step 9: Merge automático tras éxito y aprobación
      - name: Success-merge
        if: steps.apply.outcome == 'success' && github.event.review.state == 'approved'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ github.event.deployment.environment }}
          head: ${{ github.ref_name }}
          commit_message: 'Merge automático desde la rama ${{ github.ref_name }}'
